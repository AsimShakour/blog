Blog
Hash table summary:
	• Key to value mappings are unique
	• Hash tables are typically very fast
	• For small datasets, arrays are usually more efficient
	• Hash table don’t order entries in a predictable way

I learned that associative arrays are basically used because Insert, Select, and Delete operations are O(1) operations. That really matters because the get(select) performance is the same as an array. Given a few conditions are met. 

	1. Hash function has to distribute data well. 
	2. Resizing should be done at a factor of 0.7 to full capacity of the filled table. (load factor)
	3. For the same key we should get the same place in the table. It should not be a different place. If this criteria isn't met then we wont be able to obtain the data. 
	4. We should have twice the table size as the data we expect to have in the table. So if we expect to have 10 values then we should have a table that can hold 20 values. 

Hash maps are useful in many ways compared to other data structures like linked list or arrays if the above criteria is met. If some of them are not best then we may take a performance hit which will cause the Hash Map to be closer to an array or linked list in performance or perhaps worse. 

Speaking of performance the hash table efficiency according to Jay Wengrow (author of A Common Sense Guide to Data Structures and Algorithms) is based on 3 factors:
	A. How much data we're using storing in the hash table
	B. How many cells are available in the hash table
	C. Which hash function we're using

Here is an example of an Insert from Wengrow's book:

var votes = {};
function addVote(candidate) {
  if(votes[candidate])  {
    votes[candidate]++;
  }  else {
     votes[candidate] = 1;
  }

function countVotes() {
  return votes;
}

So you're probably wondering if you need to implement a complicated hash function yourself? No you don't. In each language you have a way to do this
	1. .Net / Python / Ruby - GatHashCode function
	2. JS - you may need to implement custom code
	3. JS with Node npm install an appropriate module

The integer has value is often calculated with an object's id. So if you have 2 d

A hash value is based on what it means for two objects to be equal. 

2 objects are equal if they are the same object living in the same location. We need to know this if we are working with custom classes. 

How do we use hash tables across table?
JavaScript we use objects as associative arrays. 
C#/.Net hash table in Systems.Collections.

When should use a hash data structures. Hash maps also take a lot of space.  Searching is very fast. Insertion and Deletion are also quick. 

Hash map operations always take the same amount of time, regardless of the size of the hash table. The only reason we may not get O(1) operation is when we will have a collision. 

There's no real sorting with hash based structures. 

Keywords:  hash function maps the key to a value. In best case scenario it will map a key to a unqie slot in a table. 



Other note: if you are tying to add to a value that already exists then it will do an update operation. 
